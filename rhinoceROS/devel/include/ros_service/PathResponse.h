// Generated by gencpp from file ros_service/PathResponse.msg
// DO NOT EDIT!


#ifndef ROS_SERVICE_MESSAGE_PATHRESPONSE_H
#define ROS_SERVICE_MESSAGE_PATHRESPONSE_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace ros_service
{
template <class ContainerAllocator>
struct PathResponse_
{
  typedef PathResponse_<ContainerAllocator> Type;

  PathResponse_()
    : lat()
    , lon()  {
    }
  PathResponse_(const ContainerAllocator& _alloc)
    : lat(_alloc)
    , lon(_alloc)  {
  (void)_alloc;
    }



   typedef std::vector<double, typename ContainerAllocator::template rebind<double>::other >  _lat_type;
  _lat_type lat;

   typedef std::vector<double, typename ContainerAllocator::template rebind<double>::other >  _lon_type;
  _lon_type lon;





  typedef boost::shared_ptr< ::ros_service::PathResponse_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::ros_service::PathResponse_<ContainerAllocator> const> ConstPtr;

}; // struct PathResponse_

typedef ::ros_service::PathResponse_<std::allocator<void> > PathResponse;

typedef boost::shared_ptr< ::ros_service::PathResponse > PathResponsePtr;
typedef boost::shared_ptr< ::ros_service::PathResponse const> PathResponseConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::ros_service::PathResponse_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::ros_service::PathResponse_<ContainerAllocator> >::stream(s, "", v);
return s;
}

} // namespace ros_service

namespace ros
{
namespace message_traits
{



// BOOLTRAITS {'IsFixedSize': False, 'IsMessage': True, 'HasHeader': False}
// {'std_msgs': ['/opt/ros/melodic/share/std_msgs/cmake/../msg']}

// !!!!!!!!!!! ['__class__', '__delattr__', '__dict__', '__doc__', '__eq__', '__format__', '__getattribute__', '__hash__', '__init__', '__module__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', '__weakref__', '_parsed_fields', 'constants', 'fields', 'full_name', 'has_header', 'header_present', 'names', 'package', 'parsed_fields', 'short_name', 'text', 'types']




template <class ContainerAllocator>
struct IsFixedSize< ::ros_service::PathResponse_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::ros_service::PathResponse_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct IsMessage< ::ros_service::PathResponse_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::ros_service::PathResponse_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::ros_service::PathResponse_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::ros_service::PathResponse_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::ros_service::PathResponse_<ContainerAllocator> >
{
  static const char* value()
  {
    return "43ede9fa4def9d8ab271ede42f88fcd9";
  }

  static const char* value(const ::ros_service::PathResponse_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x43ede9fa4def9d8aULL;
  static const uint64_t static_value2 = 0xb271ede42f88fcd9ULL;
};

template<class ContainerAllocator>
struct DataType< ::ros_service::PathResponse_<ContainerAllocator> >
{
  static const char* value()
  {
    return "ros_service/PathResponse";
  }

  static const char* value(const ::ros_service::PathResponse_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::ros_service::PathResponse_<ContainerAllocator> >
{
  static const char* value()
  {
    return "float64[] lat\n"
"float64[] lon\n"
"\n"
;
  }

  static const char* value(const ::ros_service::PathResponse_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::ros_service::PathResponse_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.lat);
      stream.next(m.lon);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct PathResponse_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::ros_service::PathResponse_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::ros_service::PathResponse_<ContainerAllocator>& v)
  {
    s << indent << "lat[]" << std::endl;
    for (size_t i = 0; i < v.lat.size(); ++i)
    {
      s << indent << "  lat[" << i << "]: ";
      Printer<double>::stream(s, indent + "  ", v.lat[i]);
    }
    s << indent << "lon[]" << std::endl;
    for (size_t i = 0; i < v.lon.size(); ++i)
    {
      s << indent << "  lon[" << i << "]: ";
      Printer<double>::stream(s, indent + "  ", v.lon[i]);
    }
  }
};

} // namespace message_operations
} // namespace ros

#endif // ROS_SERVICE_MESSAGE_PATHRESPONSE_H
